from lib import *
import argparse


parser = argparse.ArgumentParser(description='SpeciesMLP: 16S rRNA taxonomic classifier using deep learning')
parser.add_argument('--input_dir', dest='input_dir',type=str, default='.', help='Full path of the pickle file containing the database')
#parser.add_argument('--fasta_path', dest='fasta_path', type=str, default='.', help='Full path of "SILVA_header.csv" a csv file contain the taxonomy ranks with ids generated by SILVA_header_2_csv.py')

# Parameters
args = parser.parse_args()

input_dir = args.input_dir
#fasta_path = args.fasta_path

def _2fasta_header(df):
    class_ = 'k__Bacteria; p__'+str(df['phylum'])+'; c__'+str(df['class_'])+'; o__'+str(df['order'])+'; f__'+str(df['family'])+'; g__'+str(df['genus'])
    return str(class_)

def pickle_2_fasta(df,fasta_path):
    df = df.reset_index(drop=True)
    ddata = dd.from_pandas(df, npartitions=30)
    df['id'] = ddata.map_partitions(lambda df:df.apply(lambda row: _2fasta_header(row),
                                                       axis=1)).compute(scheduler='threads')
    df['seq'] = df['encoded'].apply(decode_nu)
    seq_list=[]
    for i in range(df.shape[0]):
        seq = Seq.Seq(''.join(x for x in df.iloc[i,:]['seq']))
        #id_ = df.iloc[i,:]['id']
        record = SeqIO.SeqRecord(seq,str(i))
        seq_list.append(record)
    SeqIO.write(seq_list,fasta_path,'fasta')
    qiime_FeatData_Tax = pd.DataFrame(columns=['id','rank'])
    qiime_FeatData_Tax['id']= df.index
    qiime_FeatData_Tax['rank'] = df['id']
    qiime_FeatData_Tax.to_csv(''.join(fasta_path.split('.')[0]+'_q2_taxonomy.txt'),sep='\t',index=False,header=False)

train = pd.read_pickle(input_dir+'/train.pkl')
valid =  pd.read_pickle(input_dir+'/valid.pkl')
test = pd.read_pickle(input_dir+'/test.pkl')

#Concatenating train & valid data to apply cross validation during training the naive bayes classifier
train_valid = pd.concat([train,valid])
pickle_2_fasta(train_valid,input_dir+'/train_valid.fa')
pickle_2_fasta(test,input_dir+'/test.fa')